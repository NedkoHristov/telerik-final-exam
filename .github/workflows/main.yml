# .github/workflows/main.yml
name: linters
on: [push]
jobs:
  linters:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Run rubocop
        uses: luizfonseca/github-actions-rubocop@1.5.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # vulnerability-scanners:
    # name: Vulnerability scanning
    # runs-on: ubuntu-latest
    # steps:
    #   - name: brakeman - vulnerability scanning
    #     uses: reviewdog/action-brakeman@v1
    #     with:
    #       brakeman_version: gemfile
    #       github_token: ${{ secrets.github_token }}

    #   - name: Run Snyk to check Docker image for vulnerabilities
    #     uses: snyk/actions/docker@master
    #     env:
    #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #     with:
    #       image: ${{ secrets.DOCKER_USER }}/tcp_server:latest

  vulnerability-scanners:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build an image
      run: docker build . -t tcp_server
    - name: Run Snyk to check image for vulnerabilities
      continue-on-error: true
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: tcp_server
        args: --file=Dockerfile
    - uses: github/codeql-action/upload-sarif@v1 # (more info here https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)
      with:
        sarif_file: snyk.sarif

  SAST:
    name: Static application security testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


  Notifications: #Placed here, because all tests has been already done, no need to wait anymore
    needs: [linters, vulnerability-scanners, SAST]
    runs-on: ubuntu-latest
    steps:
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SSH_SLACK_WEBHOOK }}
        SLACK_CHANNEL: telerik-upskill-devops
        SLACK_USERNAME: telerikBot
        SLACK_COLOR: ${{ job.status }}
        SLACK_FOOTER: "Telerik's DevOps Upskill challenge"

  ci-to-dockerhub:
    needs: [linters, vulnerability-scanners, SAST]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: nedko/tcp_server:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
